from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import datetime

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
user_sessions = {}

# –í–æ–ø—Ä–æ—Å—ã —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞
morning_questions = [
    "–ß—Ç–æ —Å—Ä–æ—á–Ω–æ?",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è)?",
    "–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
    "–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –Ω–∞ —á—ë–º —Ñ–æ–∫—É—Å?",
    "–ö–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∂–∏–≤–∞–µ—à—å —Å–≤–æ—é –º–∏—Å—Å–∏—é?",
    "–° –∫–µ–º –≤–∞–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å–µ–≥–æ–¥–Ω—è?",
    "–ö–∞–∫ —Ç–≤–æ—ë —Ç–µ–ª–æ –∏ —É–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –¥–Ω—è?",
    "–ì–¥–µ –≤ –¥–Ω–µ –º–µ—Å—Ç–æ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á?",
    "–ó–æ–ª–æ—Ç–∞—è —Ç—Ä–æ–π–∫–∞ –¥–Ω—è?"
]

# –í–æ–ø—Ä–æ—Å—ã –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞
evening_questions = [
    "–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è?",
    "–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ –∏—Ç–æ–≥–∞–º –¥–Ω—è?",
    "–ó–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω?",
    "–ö–æ–º—É —Ç—ã –¥–∞–ª —Ç–µ–ø–ª–æ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ?",
    "–ß—Ç–æ –±–µ—Ä—ë—à—å —Å —Å–æ–±–æ–π –∑–∞–≤—Ç—Ä–∞?",
    "–ß—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª ‚Äî –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
    "–ß–µ—Ä–Ω–æ–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
]

# –í–æ–ø—Ä–æ—Å—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
weekly_questions = [
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä
    "–ß—Ç–æ —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∏ –ø—Ä–æ–¥–≤–∏–Ω—É–ª(–∞) –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é?",
    "–ö–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã —Ç—ã –ø—Ä–æ–∂–∏–≤–∞–ª(–∞)?",
    "–ö–∞–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏–ª–∏ —É—Ä–æ–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª(–∞)?",
    "–ß—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–æ —Ç–µ–±—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
    "–ì–¥–µ —Ç—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∏–ª—Å—è / –ø–æ—Ç–µ—Ä—è–ª —Ñ–æ–∫—É—Å?",
    "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º?",
    "–ó–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é
    "–ì–ª–∞–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:",
    "–ß—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ (–ø–æ 1 —à–∞–≥—É)?",
    "–ß—Ç–æ –±—É–¥–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",
    "–ö–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–∂–∏–≤–∞—Ç—å?",
    "–ö–∞–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è / –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–∞–∂–Ω—ã —Å–µ–π—á–∞—Å?",
    "–ß—Ç–æ –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å?",
    "–õ–∏—á–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏:"
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ù–∞–ø–∏—à–∏ /utro, /vecher –∏–ª–∏ /nedelya, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∏—Ç—É–∞–ª.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∏—Ç—É–∞–ª–æ–≤
async def start_ritual(update: Update, context: ContextTypes.DEFAULT_TYPE, ritual_type, questions):
    user_id = update.effective_user.id
    user_sessions[user_id] = {
        "type": ritual_type,
        "step": 0,
        "answers": [],
        "questions": questions,
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    await update.message.reply_text(f"üß≠ {ritual_type.capitalize()} —Å—Ç–∞—Ä—Ç: {questions[0]}")

async def utro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_ritual(update, context, "—É—Ç—Ä–æ", morning_questions)

async def vecher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_ritual(update, context, "–≤–µ—á–µ—Ä", evening_questions)

async def nedelya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_ritual(update, context, "–Ω–µ–¥–µ–ª—è", weekly_questions)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /utro, /vecher –∏–ª–∏ /nedelya, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª.")
        return

    session["answers"].append(update.message.text)
    session["step"] += 1

    if session["step"] < len(session["questions"]):
        next_question = session["questions"][session["step"]]
        await update.message.reply_text(next_question)
    else:
        summary_lines = [f"{i+1}. {q} ‚Äî {a}" for i, (q, a) in enumerate(zip(session["questions"], session["answers"]))]
        summary = f"üìò {session['type'].capitalize()} –æ—Ç {session['date']}\n" + "\n".join(summary_lines)
        await update.message.reply_text(summary)
        user_sessions.pop(user_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import os
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("utro", utro))
    app.add_handler(CommandHandler("vecher", vecher))
    app.add_handler(CommandHandler("nedelya", nedelya))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
